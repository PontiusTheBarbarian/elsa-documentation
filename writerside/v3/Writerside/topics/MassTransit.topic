<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="MassTransit" id="MassTransit" switcher-label="Message Broker">

    <code-block lang="console">
        dotnet add package Elsa.MassTransit
    </code-block>
    <p>
        <a href="https://masstransit.io/">MassTransit</a> is an open-source distributed application framework for .NET that provides a consistent abstraction on top of the supported message transports.
    </p>
    <p>
        It enables .NET developers to model messages as C# types, which can then be sent &amp; received.
        To receive messages, one would typically write a <a href="https://masstransit.io/documentation/concepts/consumers">Consumer</a>.
    </p>
    <p>
        When using the MassTransit module with Elsa, there is an additional method of sending &amp; handling messages; through workflow activities.
    </p>

    <chapter title="Messages as Activities" id="command">
        <p>Elsa makes it easy to send and receive messages that are modeled as .NET type. All you need to do is define your type and then register it with the MassTransit feature.</p>

        <p>When a message type is registered, two new activities will be automatically available for use:</p>
        <list>
            <li>Publish {activity type}</li>
            <li>{activity type}</li>
        </list>

        <p>
            The first activity will <i>publish</i> your message.
            The second activity acts as a trigger and will start or resume your workflow when a message of this type is received.
        </p>

    </chapter>

    <chapter title="Setup" id="setup">
        <p>The following example highlights creating and registering a fictive message type called <code>OrderCreated</code>.</p>

        <control>OrderCreated.cs:</control>
        <code-block lang="c#">
            public record OrderCreated(string Id, string ProductId, int Quantity);
        </code-block>

        <control>Program.cs</control>
        <code-block lang="c#" switcher-key="Memory"><![CDATA[
            services.AddElsa(elsa =>
            {
                // Enable and configure MassTransit
                elsa.AddMassTransit(massTransit =>
                {
                    // Register our message type.
                    massTransit.AddMessageType<OrderCreated>();
                };
            });
        ]]></code-block>
        <code-block lang="c#" switcher-key="RabbitMQ"><![CDATA[
            services.AddElsa(elsa =>
            {
                // Enable and configure MassTransit
                elsa.AddMassTransit(massTransit =>
                {
                   // Configure MT to use the RabbitMQ broker.
                    massTransit.UseRabbitMq("amqp://guest:guest@localhost:5672", rabbit => rabbit.ConfigureServiceBus = bus =>
                    {
                        bus.PrefetchCount = 4;
                        bus.Durable = true;
                        bus.AutoDelete = false;
                        bus.ConcurrentMessageLimit = 32;
                        // etc.
                    });

                    // Register our message type.
                    massTransit.AddMessageType<OrderCreated>();
                };
            });
        ]]></code-block>
        <code-block lang="c#" switcher-key="Azure Service Bus"><![CDATA[
            services.AddElsa(elsa =>
            {
                // Enable and configure MassTransit
                elsa.AddMassTransit(massTransit =>
                {
                   // Configure MT to use the Azure Service Bus broker.
                    massTransit.UseAzureServiceBus(azureServiceBusConnectionString, serviceBusFeature => serviceBusFeature.ConfigureServiceBus = bus =>
                    {
                        bus.PrefetchCount = 4;
                        bus.LockDuration = TimeSpan.FromMinutes(5);
                        bus.MaxConcurrentCalls = 32;
                        bus.MaxDeliveryCount = 8;
                        // etc.
                    });

                    // Register our message type.
                    massTransit.AddMessageType<OrderCreated>();
                };
            });
        ]]></code-block>
        <p>With the above setup, our workflow server will now add two activities that allow you to send and receive messages of type `OrderCreated`:</p>
        <list>
            <li>Order Created</li>
            <li>Publish Order Created</li>
        </list>

        The <i>Order Created</i> activity acts as a trigger, which means that it will automatically start the workflow it is a part of when a message is received of this type.
        The <i>Publish Order Created</i> activity will publish a message of this type.
    </chapter>

    <chapter title="Tutorial" id="tutorial">
        <p>In this tutorial, we will setup an <a href="Elsa-Server.topic">Elsa Server</a> and configure it to use the MassTransit module and see it in action.</p>
        <chapter title="Prerequisites" id="prerequisites">
            <p>For this tutorial, you will need:</p>
            <list>
                <li>To create a new ASP.NET project by following the <a href="Elsa-Server.topic">Elsa Server</a> setup guide.</li>
                <li switcher-key="RabbitMQ">A connection string to a running RabbitMQ instance.</li>
                <li switcher-key="Azure Service Bus">A connection string to an Azure Service Bus resource.</li>
            </list>
            <p>Then return here.</p>
            <tip title="RabbitMQ Server" switcher-key="RabbitMQ">
                <p>Setting up a local RabbitMQ server is easy!</p>
                <p>Just run the following Docker command to spin up a Docker container:</p>
                <code-block lang="console">
                    docker run -d --name rabbitmq -p 15672:15672 -p 5672:5672 rabbitmq:3-management
                </code-block>
                <p>You can then use the following connection string:</p>
                <code-block lang="text">
                    amqp://guest:guest@localhost:5672
                </code-block>
            </tip>
        </chapter>

        <chapter title="Project Setup" id="project-setup">
            <procedure title="Using MassTransit">
                <step>Create a new ASP.NET project by following the <a href="Elsa-Server.topic">Elsa Server</a> setup guide.</step>
                <step switcher-key="Memory">
                    <p>Install the following package:</p>
                    <code-block lang="console">
                        dotnet add package Elsa.MassTransit
                    </code-block>
                </step>
                <step switcher-key="RabbitMQ">
                    <p>Install the following packages:</p>
                    <code-block lang="console">
                        dotnet add package Elsa.MassTransit
                        dotnet add package Elsa.MassTransit.RabbitMQ
                    </code-block>
                </step>
                <step switcher-key="Azure Service Bus">
                    <p>Install the following packages:</p>
                    <code-block lang="console">
                        dotnet add package Elsa.MassTransit
                        dotnet add package Elsa.MassTransit.AzureServiceBus
                    </code-block>
                </step>
                <step>
                    <p>Add the following code to <control>Program.cs</control>:</p>
                    <code-block switcher-key="Memory"><![CDATA[
                    elsa.UseMassTransit(massTransit =>
                    {
                        massTransit.AddMessageType<OrderCompleted>();
                        massTransit.AddMessageType<OrderCreated>();
                    });
                ]]></code-block>
                    <code-block switcher-key="Azure Service Bus"><![CDATA[
                    elsa.UseMassTransit(massTransit =>
                    {
                        massTransit.UseAzureServiceBus(azureServiceBusConnectionString);
                        massTransit.AddMessageType<OrderCompleted>();
                        massTransit.AddMessageType<OrderCreated>();
                    });
                ]]></code-block>
                    <code-block switcher-key="RabbitMQ"><![CDATA[
                    elsa.UseMassTransit(massTransit =>
                    {
                        massTransit.UseRabbitMq(rabbitMqConnectionString);
                        massTransit.AddMessageType<OrderCompleted>();
                        massTransit.AddMessageType<OrderCreated>();
                    });
                ]]></code-block>
                </step>
            </procedure>
        </chapter>

    </chapter>


    <seealso>
        <!--Provide links to related how-to guides, overviews, and tutorials.-->
    </seealso>
</topic>